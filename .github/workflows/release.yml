name: Create Release on Push to Main (Multi-OS)

on:
  push:
    branches:
      - main

jobs:
  build_ubuntu:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install dependencies (if you have a requirements.txt)
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        Add any other necessary installations here

    - name: Make pack.sh executable
      run: chmod +x ./pack.sh

    - name: Run packaging script (Ubuntu)
      run: ./pack.sh

    - name: Upload artifact (Ubuntu)
      uses: actions/upload-artifact@v4
      with:
        name: level-editor-ubuntu
        path: Map-Editor/

  build_windows:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install dependencies (if you have a requirements.txt)
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        Add any other necessary installations here

    # Note: chmod +x is not needed on Windows for .sh scripts if using Git Bash or similar,
    # but pack.sh should be executable in the Windows environment.
    # If pack.sh is a Python script, ensure it's executable via `python pack.py` or similar.
    # If pack.sh is a shell script, you might need to adjust how it's called on Windows.
    # For simplicity, we'll assume pack.sh is executable or called appropriately.

    - name: Run packaging script (Windows)
      run: ./pack.sh # Or potentially `bash ./pack.sh` if Git Bash is available, or `python pack.py` etc.

    - name: Upload artifact (Windows)
      uses: actions/upload-artifact@v4
      with:
        name: level-editor-windows
        # Corrected path based on your clarification
        path: Map-Editor/
        # Add a specific path to the executable if needed, e.g., path: Map-Editor/Map-Editor.exe

  create_release:
    runs-on: ubuntu-latest # Can run on any OS, Ubuntu is common
    needs: [build_ubuntu, build_windows] # This job depends on both build jobs completing successfully

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        # Download all artifacts from the previous jobs
        path: artifacts/

    - name: List downloaded files (for debugging)
      run: ls -R artifacts/

    - name: Create release directory structure
      run: |
        mkdir release_package
        mkdir release_package/Windows
        mkdir release_package/Linux

    - name: Copy files into release structure
      run: |
        # Copy documentation from the Map-Editor directory within the artifact
        cp -r artifacts/level-editor-ubuntu/Map-Editor/doc/ release_package/

        # Copy Windows executable from the Map-Editor directory within the artifact
        cp artifacts/level-editor-windows/Map-Editor/Map-Editor.exe release_package/Windows/

        # Copy Linux executable from the Map-Editor directory within the artifact
        cp artifacts/level-editor-ubuntu/Map-Editor/Map-Editor release_package/Linux/

    - name: Create ZIP archive
      run: |
        zip -r level-editor-release.zip release_package/

    - name: List files in current directory (for debugging)
      run: ls -l

    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        # Use the commit hash as the tag for simplicity, or you could parse a version from a file
        tag_name: ${{ github.sha }}
        name: Release ${{ github.sha }}
        body: |
          Automated release based on commit ${{ github.sha }}.

          Includes builds for Ubuntu and Windows.
        draft: false
        prerelease: false
        # Upload the single ZIP file
        files: level-editor-release.zip

      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is automatically provided by GitHub